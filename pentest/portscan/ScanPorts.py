#-------------------------------------------------------------
 # 
 #   .SYNOPSIS
 #   ScanPorts - a simple, Scapy-based port scanning tool
 #   
 #   .NOTES
 #   Author: Charles Christensen
 #   Required Dependencies: python3, scapy, python-magic
 #   
#-------------------------------------------------------------

#==========================================
#  PARMETERS / VARIABLES
#==========================================

# Import libraries.
import scapy.all as scapy   # scapy
import netaddr              # netaddr
import magic                # python-magic, python-magic-bin
import sys                  # n/a
import os                   # n/a

# Define variables.
KNOWN_PORTS = [21,22,23,25,53,80,110,111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080]
HELP_MSG = '''
SYNOPSIS
    ScanPorts - a simple, Scapy-based port scanning tool
                authored by Charles Christensen

USAGE
    python3 ScanPorts.py [OPTIONS]

OPTIONS
    -h, --help, -?
        Display this help message
'''
targets = set()
ports = set(KNOWN_PORTS)
types = set(["tcp","udp"])

#==========================================
#  FUNCTIONS
#==========================================

def CustomPrint(message, color="WHITE", newline=True):
    
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    
    if color == "GREEN":
        print(GREEN, end='')
    if color == "YELLOW":
        print(YELLOW, end='')
    if color == "RED":
        print(RED, end='')
    if color == "WHITE":
        print(ENDC, end='')
    
    print(message, end='')
    
    if newline:
        print(ENDC)
    else:
        print(ENDC, end='')

def IsIP(text):
    try:
        netaddr.IPAddress(text)
    except:
        return False
    return True

#==========================================
#  MAIN
#==========================================

# Check CLI parameters.
params = sys.argv.copy()
params[0] = ""
if len(params) < 3:
    CustomPrint("ERROR! Target host not specified. (Use '--help' for more information.)", "RED")
    sys.exit()

# Parse CLI parameters.
index = 0
for param in params:
    param = param.lower()
    
    # Help flag.
    if (param == "--help") or ("?" in param):
        CustomPrint(HELP_MSG, "GREEN")
        sys.exit()
    
    # Target host flag.
    if (param == "-h") or (param == "--host") or (param == "--hosts"):
        
        # Extract IP addresses from text file.
        if os.path.isfile(params[index+1]):
            filepath = params[index+1]
            filetype = magic.Magic(mime=True)
            if filetype.from_file(filepath) != "text/plain":
                CustomPrint("ERROR! Invalid hosts file. Must be a multi-line text file. <" + params[index+1] + ">", "RED")
                sys.exit()
            try:
                filestream = open(filepath, "r")
                line = filestream.readline().strip()
                while line:
                    if IsIP(line):
                        targets.add(line)
                    else:
                        CustomPrint("WARNING! Excluding invalid IP address from scan. <" + line + ">", "YELLOW")
                    line = filestream.readline().strip()
            except:
                CustomPrint("ERROR! Unable to open targets file.", "RED")
                sys.exit()
            finally:
                filestream.close()
        
        # Extract IP addresses from CIDR range.
        elif "/" in params[index+1]:
            try:
                netaddr.IPNetwork(params[index+1])
            except:
                CustomPrint("ERROR! Invalid CIDR range. <" + params[index+1] + ">", "RED")
                sys.exit()
            for ip in netaddr.IPNetwork(params[index+1]):
                targets.add(str(ip))
        
        # Add a single IP address.
        else:
            if IsIP(params[index+1]):
                targets.add(params[index+1])
            else:
                CustomPrint("ERROR! Invalid IP address. <" + params[index+1] + ">", "RED")
                sys.exit()
        
        if len(targets) > 0:
            params[index] = ""
            params[index+1] = ""
    
    # Target ports flag.
    if (param == "-p") or (param == "--port") or (param == "--ports"):
        raw_ports = params[index+1].lower().split(",")
        for raw_port in raw_ports:
            if "-" in raw_port:
                raw_port_range = raw_port.split("-")
                for num in range(int(raw_port_range[0]), int(raw_port_range[1])+1):
                    ports.add(int(num))
            elif raw_port == "all":
                for num in range(0, 65536):
                    ports.add(int(num))
            elif (raw_port == "reserved") or (raw_port == "privileged"):
                for num in range(0, 1024):
                    ports.add(int(num))
            elif (raw_port == "known") or (raw_port == "top"):
                for known_port in KNOWN_PORTS:
                    ports.add(int(known_port))
            else:
                ports.add(int(raw_port))
        
        if len(ports) > 0:
            params[index] = ""
            params[index+1] = ""
    
    # Port scan type flag.
    if (param == "-t") or (param == "--type") or (param == "--types"):
        types = set()
        raw_types = params[index+1].lower().split(",")
        for raw_type in raw_types:
            if (raw_type == "tcp") or (raw_type == "udp") or (raw_type == "icmp"):
                types.add(raw_type)
            elif raw_type == "ping":
                types.add("icmp")
            else:
                CustomPrint("WARNING! Excluding invalid port scan type. <" + raw_type + ">.", "YELLOW")
        
        if len(types) > 0:
            params[index] = ""
            params[index+1] = ""
                
    index = index + 1

# Verify CLI parameters.
for param in params:
    if param != "":
        CustomPrint("ERROR! Invalid parameter. <" + param + ">", "RED")
        sys.exit()
if len(targets) < 1:
    CustomPrint("ERROR! No valid IP targets specified.", "RED")
    sys.exit()
if len(ports) < 1:
    CustomPrint("ERROR! No valid ports specified.", "RED")
    sys.exit()
if len(types) < 1:
    CustomPrint("ERROR! No valid port scan types specified.", "RED")
    sys.exit()


    
print(str(params))
print(str(targets))
print(str(ports))
print(str(types))
